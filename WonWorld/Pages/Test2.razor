@page "/fetchdata2"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<body>
    @if (forecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table id="example" class="display" style="width:100%">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</body>

@code {
    List<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        //  forecasts = await HttpClient.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        forecasts = new List<WeatherForecast>();
        forecasts.Add(new WeatherForecast() { Date = DateTime.Now, TemperatureC = 5, Summary = "추움" });
     //   await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }


    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
